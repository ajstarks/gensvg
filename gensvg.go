// Package gensvg provides an API for generating Scalable Vector Graphics (SVG),
// using floating point units
package gensvg

// package main
//
// 	import (
// 		"github.com/ajstarks/gensvg"
// 		"os"
// 	)
//
// 	var (
// 		width = 500.0
// 		height = 500.0
// 		canvas = gensvg.New(os.Stdout)
// 	)
//
// 	func main() {
// 		canvas.Start(width, height)
// 		canvas.Circle(width/2, height/2, 100)
// 		canvas.Text(width/2, height/2, "Hello, SVG",
//                   "text-anchor:middle;font-size:30px;fill:white")
// 		canvas.End()
// 	}
//

import (
	"fmt"
	"io"
)

// SVG defines the location of the generated SVG
type SVG struct {
	Writer   io.Writer
	Decimals int
}

// Offcolor defines the offset and color for gradients
type Offcolor struct {
	Offset  uint8
	Color   string
	Opacity float64
}

// Filterspec defines the specification of SVG filters
type Filterspec struct {
	In, In2, Result string
}

const (
	svgtop = `<?xml version="1.0"?>
<!-- Generated by gensvg -->
<svg`
	svginitfmt = `%s width="%.*f%s" height="%.*f%s"`
	svgns      = `
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">`
	vbfmt = `viewBox="%.*f %.*f %.*f %.*f"`

	emptyclose = "/>\n"
)

// New is the SVG constructor, specifying the io.Writer where the generated SVG is written
// and the number of digits after the decimal place in generated data
func New(w io.Writer) *SVG { return &SVG{Writer: w, Decimals: 2} }

func (svg *SVG) print(a ...interface{}) (n int, errno error) {
	return fmt.Fprint(svg.Writer, a...)
}

func (svg *SVG) println(a ...interface{}) (n int, errno error) {
	return fmt.Fprintln(svg.Writer, a...)
}

func (svg *SVG) printf(format string, a ...interface{}) (n int, errno error) {
	return fmt.Fprintf(svg.Writer, format, a...)
}

func (svg *SVG) genattr(ns []string) {
	for _, v := range ns {
		svg.printf("\n     %s", v)
	}
	svg.println(svgns)
}
